/**
 * @fileType: utility
 * @status: current
 * @updated: 2025-08-28
 * @tags: [template, ai-instructions, frontmatter, ai-optimization, model-agnostic]
 * @related: [init.ts, project-analyzer.ts, ai-adapter.ts]
 * @priority: high
 * @complexity: medium
 * @dependencies: []
 */

export interface ProjectContext {
  projectName: string;
  techStack: string[];
  projectType: 'webapp' | 'api' | 'cli' | 'library' | 'monorepo' | 'unknown';
  hasTests: boolean;
  testCommand?: string;
  buildCommand?: string;
  lintCommand?: string;
  packageManager: 'npm' | 'yarn' | 'pnpm' | 'bun' | 'unknown';
  frameworks: string[];
  languages: string[];
}

export interface TemplateVariables extends ProjectContext {
  userEmail: string;
  userName: string;
  date: string;
  aiModel?: string; // Optional AI model name
}

export class AiInstructionsTemplate {
  private static readonly FRONTMATTER_SECTION = `
## AI-Optimized File Discovery (ADR-002)

**MANDATORY: Use these commands for 70% faster context discovery:**

\`\`\`bash
# Before reading any file - get instant context
head -12 filename.ts

# Find files by functionality
find . -name "*.ts" -o -name "*.tsx" | xargs grep -l "@tags:.*keyword"

# Find related files
grep -l "@related.*filename" **/*.ts

# Assess complexity before diving in
find . -name "*.ts" | xargs grep -l "@complexity: high"
\`\`\`

### Required Frontmatter for All New Files

**ALWAYS add this frontmatter when creating TypeScript/JavaScript files:**

\`\`\`typescript
/**
 * @fileType: [component|page|api-route|hook|utility|provider|model|config]
 * @status: current
 * @updated: YYYY-MM-DD
 * @tags: [relevant, keywords, for, search]
 * @related: [connected-file.ts, related-component.tsx]
 * @priority: [critical|high|medium|low]
 * @complexity: [low|medium|high]
 * @dependencies: [external-packages, local-modules]
 */
\`\`\`
`;

  private static readonly DEVELOPMENT_WORKFLOW = `
## Development Workflow

### Before Any Task - INVENTORY Phase
1. **Check what exists**: \`ls -la\` relevant directories
2. **Find examples**: Look for similar features already implemented
3. **Use frontmatter**: \`head -12\` files for instant context
4. **Test existing**: Try current endpoints/features first

### Core Methodology
**INVENTORY â†’ CONTEXT â†’ THINK â†’ PLAN â†’ PRE-MORTEM â†’ VALIDATE â†’ ACT â†’ TEST**

### The Vibecheck Pattern ðŸŽ¯
When feeling lost or sensing misalignment:
- Call it: "I think we need a vibecheck"
- Reset: "What are we actually trying to achieve?"
- Realign: Agree on clear next steps
- Continue: Resume with fresh perspective
`;

  static generate(variables: TemplateVariables, modelSpecificContent?: string): string {
    const aiName = variables.aiModel || 'AI Assistant';
    return `# ${variables.projectName} - ${aiName} Collaboration Guide

## Project Context
- **Type**: ${variables.projectType}
- **Tech Stack**: ${variables.techStack.join(', ')}
- **Languages**: ${variables.languages.join(', ')}
- **Frameworks**: ${variables.frameworks.join(', ')}
- **Package Manager**: ${variables.packageManager}
- **Generated**: ${variables.date}

## Quick Commands
${this.generateQuickCommands(variables)}

${this.FRONTMATTER_SECTION}

${this.DEVELOPMENT_WORKFLOW}

${this.generateProjectSpecificSection(variables)}

${this.generateTestingSection(variables)}

${this.generateGitSection(variables)}

## Team Information
- **Primary Developer**: ${variables.userName} (${variables.userEmail})
- **AI Pair Programming**: Enabled via Ginko
${modelSpecificContent || ''}

## Session Management
- \`ginko start\` - Begin new session with context loading
- \`ginko handoff\` - Save progress for seamless continuation
- \`ginko vibecheck\` - Quick realignment when stuck
- \`ginko ship\` - Create PR-ready branch with context

## Privacy & Security
- All context stored locally in \`.ginko/\`
- No data leaves your machine without explicit action
- Handoffs are git-tracked for team collaboration
- Config (\`.ginko/config.json\`) is gitignored

---
*This file was auto-generated by ginko init and should be customized for your team's needs*
`;
  }

  private static generateQuickCommands(variables: TemplateVariables): string {
    const commands: string[] = [];
    
    if (variables.buildCommand) {
      commands.push(`- **Build**: \`${variables.buildCommand}\``);
    }
    if (variables.testCommand) {
      commands.push(`- **Test**: \`${variables.testCommand}\``);
    }
    if (variables.lintCommand) {
      commands.push(`- **Lint**: \`${variables.lintCommand}\``);
    }
    
    if (variables.packageManager !== 'unknown') {
      commands.push(`- **Install**: \`${variables.packageManager} install\``);
      commands.push(`- **Dev Server**: \`${variables.packageManager} ${variables.packageManager === 'npm' ? 'run' : ''} dev\``);
    }
    
    return commands.length > 0 ? commands.join('\n') : '- No commands detected yet';
  }

  private static generateProjectSpecificSection(variables: TemplateVariables): string {
    const sections: string[] = ['## Project-Specific Patterns\n'];
    
    // React/Next.js specific
    if (variables.frameworks.includes('react') || variables.frameworks.includes('nextjs')) {
      sections.push(`### React/Next.js Conventions
- Components in \`src/components/\` or \`app/\`
- Hooks prefixed with \`use\` in \`src/hooks/\`
- Server components by default in Next.js 13+
- Client components need \`'use client'\` directive`);
    }
    
    // Node.js API specific
    if (variables.projectType === 'api') {
      sections.push(`### API Conventions
- Route handlers in \`src/routes/\` or \`api/\`
- Middleware in \`src/middleware/\`
- Database models in \`src/models/\`
- Use existing error handling patterns`);
    }
    
    // CLI specific
    if (variables.projectType === 'cli') {
      sections.push(`### CLI Conventions
- Commands in \`src/commands/\`
- Utilities in \`src/utils/\`
- Configuration handling in \`src/config/\`
- User-friendly error messages with chalk`);
    }
    
    // TypeScript specific
    if (variables.languages.includes('typescript')) {
      sections.push(`### TypeScript Guidelines
- Prefer interfaces over types for objects
- Use strict mode settings
- Avoid \`any\` - use \`unknown\` if type is truly unknown
- Export types from \`.types.ts\` files`);
    }
    
    return sections.join('\n\n');
  }

  private static generateTestingSection(variables: TemplateVariables): string {
    if (!variables.hasTests) {
      return `## Testing
- No test framework detected
- Consider adding tests as you develop new features`;
    }
    
    return `## Testing Requirements
- **Test Command**: \`${variables.testCommand || 'npm test'}\`
- Write tests for new features
- Maintain existing test coverage
- Run tests before committing
- Fix any failing tests immediately`;
  }

  private static generateGitSection(variables: TemplateVariables): string {
    return `## Git Workflow
- **Never** commit directly to main/master
- Create feature branches: \`feature/description\`
- Use conventional commits: \`feat:\`, \`fix:\`, \`docs:\`, etc.
- Include co-author: ${variables.userName} <${variables.userEmail}>
- Run \`ginko handoff\` before switching context`;
  }
}